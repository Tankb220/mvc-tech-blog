var fs = require("fs")
var inspect = require("util").inspect
var path = require("path")

module.exports = compile_jass

function compile_jass(source, options, callback) {
  var dirname = path.dirname(options.filename)
  var locals = options.locals || {}

  callback(null, source.replace(/\/\*=(((?!\*\/).)*)\*\//g, (
    function (match, source) {
      try {
        var keys = Object.keys(locals)

        return JSON.stringify(new Function(
          keys.join(", "), "return " + source
        ).apply(
          null, keys.map(function (key) {
            return locals[key]
          })
        ))
      } catch (error) {
        error.message += "\n    in " + inspect(source)
        throw error
      }
    }
  )).replace(/^\/\/@include ".\/(.*)"\n/gm, (
    function (match, filename) {
      return fs.readFileSync(dirname + "/" + filename)
    }
  )))
}

compile_jass.middleware = function (options) {
  return function (request, response, next) {
    if (path.extname(request.path) === ".js") {
      var jass_file = options.src
        + request.path.replace(/\.js$/, ".jass.js")

      path.exists(jass_file, function (exists) {
        if (exists) {
          fs.readFile(jass_file, function (error, source) {
            if (error) {
              next(error)
            } else {
              compile_jass(source.toString(), {
                filename: jass_file,
                locals: options.locals
              }, (
                function (error, result) {
                  if (error) {
                    next(error)
                  } else {
                    response.type = "javascript"
                    response.end(result)
                  }
                }
              ))
            }
          })
        } else {
          next()
        }
      })
    }
  }
}
